name: Docker Image CI

on:
  push:

jobs:

  sast:
    runs-on: ubuntu-latest
    if: false
    steps:
      - uses: actions/checkout@v4
      - id: sast
        name: Bearer Action
        # You may pin to the exact commit or the version.
        # uses: Bearer/bearer-action@828eeb928ce2f4a7ca5ed57fb8b59508cb8c79bc
        uses: Bearer/bearer-action@v2
        with:
            # Specify the Bearer version to use. This must match a Bearer release name.
            version: # optional, default is
            # Specify the comma separated scanners e.g. --scanner secrets,sast
            # scanner: # optional, default is
            # configuration file path
            # config-file: # optional, default is
            # bearer.ignore file path
            # bearer-ignore-file: # optional, default is
            # Specify the comma-separated ids of the rules you would like to run. Skips all other rules.
            # only-rule: # optional, default is
            # Specify the comma-separated ids of the rules you would like to skip. Runs all other rules.
            # skip-rule: # optional, default is
            # Specify the comma separated files and directories to skip. Supports * syntax, e.g. --skip-path users/*.go,users/admin.sql
            # skip-path: # optional, default is
            # Specify the comma-separated fingerprints of the findings you would like to exclude from the report.
            # exclude-fingerprint: # optional, default is
            # Specify which severities are included in the report as a comma separated string
            # severity: # optional, default is
            # Specify which format to use for the report (json, yaml, sarif, gitlab-sast)
            # format: # optional, default is
            # Specify where to store the report
            # output: # optional, default is
            # For use with Bearer Cloud
            # api-key: # optional, default is
            diff: false
            quiet: false
            hide-progress-bar: true
            #exit-code: 50
            path: .

  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      PSONO_CI_API_KEY_ID: ${{ secrets.PSONO_API_KEY_ID }}
      PSONO_CI_API_SECRET_KEY_HEX: ${{ secrets.PSONO_API_SECRET_KEY_HEX }}
      PSONO_CI_SERVER_URL: ${{ secrets.PSONO_SERVER_URL }}
      PSONO_DOCKERHUB_REGISTRY_ID: ${{ secrets.PSONO_DOCKERHUB_REGISTRY_ID }}
      PSONO_GITHUB_REGISTRY_ID: ${{ secrets.PSONO_GITHUB_REGISTRY_ID }}
      PSONO_GITHUB_TOKEN_ID: ${{ secrets.PSONO_GITHUB_CLI_TOKEN}}
    steps:
      - id: setup-secrets
        name: Setup secrets
        run: |
          sudo apt update >/dev/null && sudo apt install -y curl >/dev/null
          curl https://get.psono.com/psono/psono-ci/x86_64-linux/psonoci --output psonoci >/dev/null && chmod +x psonoci
          ci_psono_registry="$(./psonoci env-vars get-or-create ${PSONO_GITHUB_REGISTRY_ID} CI_REGISTRY)"
          ci_psono_registry_user="$(./psonoci env-vars get-or-create ${PSONO_GITHUB_REGISTRY_ID} CI_REGISTRY_USER)"
          ci_psono_registry_password="$(./psonoci env-vars get-or-create ${PSONO_GITHUB_REGISTRY_ID} CI_REGISTRY_PASSWORD)"
          ci_psono_registry_github_token="$(./psonoci secret get ${PSONO_GITHUB_CLI_TOKEN} password)"
          echo "::add-mask::$ci_psono_registry"
          echo "ci_registry=$ci_psono_registry" >> "$GITHUB_OUTPUT"
          echo "::add-mask::$ci_psono_registry_user"
          echo "ci_registry_user=$ci_psono_registry_user" >> "$GITHUB_OUTPUT"
          echo "::add-mask::$ci_psono_registry_password"
          echo "ci_registry_password=$ci_psono_registry_password" >> "$GITHUB_OUTPUT"
          echo "::add-mask::$ci_psono_registry_github_token"
          echo "ci_registry_github_token=$ci_psono_registry_github_token" >> "$GITHUB_OUTPUT"

      - name: Dump github context
        run:   echo "$GITHUB_CONTEXT"
        shell: bash
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - id: docker-login
        name: Docker Login
        uses: docker/login-action@v3.4.0
        with:
            registry: ${{ steps.setup-secrets.outputs.ci_registry }}
            username: ${{ steps.setup-secrets.outputs.ci_registry_user }}
            password: ${{ steps.setup-secrets.outputs.ci_registry_password }}
            ecr: auto
            logout: true

      - uses: actions/checkout@v4

      - env:
          CI_PSONO_REGISTRY: ${{ steps.setup-secrets.outputs.ci_registry }}
          CI_REGISTRY: ${{ steps.setup-secrets.outputs.ci_registry }}
        id: buid-docker-image
        name: Build the Docker image
        run: |
          IMAGE="${CI_REGISTRY}/${GITHUB_REPOSITORY}:build"
          echo "Building for branch: ${GITHUB_REF_NAME}:${GITHUB_SHA:0:8}"
          docker build --build-arg BUILD_DATE="$(date --iso-8601=seconds)" --build-arg VERSION="${GITHUB_REF}.${GITHUB_SHA:0:8}" -t ${IMAGE} .
          docker push ${IMAGE}

      - id: container-scan
        name: Container Scan
        uses: crazy-max/ghaction-container-scan@v3.1.0
        with:
            trivy_version: latest
            # Container image to scan (eg. alpine:3.7)
            image: "${{ steps.setup-secrets.outputs.ci_registry }}/${GITHUB_REPOSITORY}:build"
            # Container image tarball path to scan
            # tarball: # optional
            # Dockerfile required to generate a sarif report
            dockerfile: ./Dockerfile
            # Report vulnerabilities of provided level or higher (default: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL)
            severity: LOW
            # Defines threshold for severity
            # severity_threshold: # optional
            ignore_unfixed: false
            annotations: false
            # GitHub Token as provided by secrets
            github_token: ${{ steps.setup-secrets.outputs.ci_registry_github_token }}
