name: Docker Image CI

on:
  push:

jobs:

  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      PSONO_CI_API_KEY_ID: ${{ secrets.PSONO_API_KEY_ID }}
      PSONO_CI_API_SECRET_KEY_HEX: ${{ secrets.PSONO_API_SECRET_KEY_HEX }}
      PSONO_CI_SERVER_URL: ${{ secrets.PSONO_SERVER_URL }}
      PSONO_DOCKERHUB_REGISTRY_ID: ${{ secrets.PSONO_DOCKERHUB_REGISTRY_ID }}
      PSONO_GITHUB_REGISTRY_ID: ${{ secrets.PSONO_GITHUB_REGISTRY_ID }}
      PSONO_GITHUB_TOKEN_ID: ${{ secrets.PSONO_GITHUB_CLI_TOKEN}}

    steps:
      - name: Dump github context
        if: false
        run:   echo "$GITHUB_CONTEXT"
        shell: bash
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - id: setup-secrets
        name: Setup secrets
        run: |
          sudo apt update >/dev/null && sudo apt install -y curl >/dev/null
          curl https://get.psono.com/psono/psono-ci/x86_64-linux/psonoci --output psonoci >/dev/null && chmod +x psonoci
          ci_psono_registry="$(./psonoci env-vars get-or-create ${PSONO_GITHUB_REGISTRY_ID} CI_REGISTRY)"
          ci_psono_registry_user="$(./psonoci env-vars get-or-create ${PSONO_GITHUB_REGISTRY_ID} CI_REGISTRY_USER)"
          ci_psono_registry_password="$(./psonoci env-vars get-or-create ${PSONO_GITHUB_REGISTRY_ID} CI_REGISTRY_PASSWORD)"
          ci_psono_registry_github_token="$(./psonoci secret get ${PSONO_GITHUB_TOKEN_ID} password)"
          echo "::add-mask::$ci_psono_registry"
          echo "ci_registry=$ci_psono_registry" >> "$GITHUB_OUTPUT"
          echo "::add-mask::$ci_psono_registry_user"
          echo "ci_registry_user=$ci_psono_registry_user" >> "$GITHUB_OUTPUT"
          echo "::add-mask::$ci_psono_registry_password"
          echo "ci_registry_password=$ci_psono_registry_password" >> "$GITHUB_OUTPUT"
          echo "::add-mask::$ci_psono_registry_github_token"
          echo "ci_registry_github_token=$ci_psono_registry_github_token" >> "$GITHUB_OUTPUT"
          echo "cs_image=${ci_psono_registry}/${GITHUB_REPOSITORY}:build" >> "$GITHUB_OUTPUT"
          echo "build_date=$(date --iso-8601=seconds)" >> "$GITHUB_OUTPUT"
          echo "build_version=${GITHUB_REF_NAME}.${GITHUB_SHA:0:8}" >> "$GITHUB_OUTPUT"

      - uses: actions/checkout@v4

      - id: docker-login
        name: Docker Login
        uses: docker/login-action@v3.4.0
        with:
            registry: ${{ steps.setup-secrets.outputs.ci_registry }}
            username: ${{ steps.setup-secrets.outputs.ci_registry_user }}
            password: ${{ steps.setup-secrets.outputs.ci_registry_password }}
            ecr: auto
            logout: true

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and load
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64
          load: true
          tags: ${{ steps.setup-secrets.outputs.cs_image }}
          build-args: (BUILD_DATE=${{ steps.setup-secrets.outputs.build_date }}, VERSION=${{ steps.setup-secrets.outputs.build_version }})

      - name: Scan for vulnerabilities
        id: scan
        uses: crazy-max/ghaction-container-scan@v3
        with:
          image: ${{ steps.setup-secrets.outputs.cs_image }}
          dockerfile: ./Dockerfile
          github_token: ${{ steps.setup-secrets.outputs.ci_registry_github_token }}

      - name: Upload SARIF file
        if: ${{ steps.scan.outputs.sarif != '' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      - name: Build and push
        if: false
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/386,linux/mips64le,linux/mips64,linux/loong64,linux/arm/v7,linux/arm/v6
          push: true
          tags: ${{ steps.setup-secrets.outputs.cs_image }}
          build-args: (BUILD_DATE=${{ steps.setup-secrets.outputs.build_date }}, VERSION=${{ steps.setup-secrets.outputs.build_version }})
