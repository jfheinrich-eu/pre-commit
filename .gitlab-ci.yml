# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
  - build
  - test

default:
  tags:
    - gitlab-org

.docker_registry:
  before_script:
    - |
      apk add --update curl
      curl https://get.psono.com/psono/psono-ci/x86_64-linux/psonoci --output psonoci && chmod +x psonoci
      cp "${PSONO_CONFIG}" .psono-config.conf
      source .psono-config.conf
      rm -f .psono-config.conf
      export CI_REGISTRY="$(./psonoci env-vars get-or-create 5497576f-d518-47cc-89ba-b9329f83897a CI_REGISTRY)"
      export CI_REGISTRY_IMAGE_PREFIX="$(./psonoci env-vars get-or-create 5497576f-d518-47cc-89ba-b9329f83897a CI_REGISTRY_IMAGE_PREFIX)"
      export CI_REGISTRY_PASSWORD="$(./psonoci env-vars get-or-create 5497576f-d518-47cc-89ba-b9329f83897a CI_REGISTRY_PASSWORD)"
      export CI_REGISTRY_USER="$(./psonoci env-vars get-or-create 5497576f-d518-47cc-89ba-b9329f83897a CI_REGISTRY_USER)"

sast:
  stage: test

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/SAST-IaC.latest.gitlab-ci.yml
  - template: Jobs/Container-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - component: gitlab.com/docker-scout/ci/cves@main
    inputs:
      stage: test
      options: --only-severity=critical,high,medium --epss

docker-scout-cves:
  before_script:
    - !reference [.docker_registry, before_script]
  variables:
    CS_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

container_scanning:
  before_script:
    - !reference [.docker_registry, before_script]
  variables:
    GIT_STRATEGY: fetch
    CS_IMAGE: $CI_REGISTRY_IMAGE_PREFIX/pre-commit:$CI_COMMIT_REF_SLUG

docker-build:
  image: docker:cli
  stage: build
  services:
    - docker:dind
  before_script:
    - !reference [.docker_registry, before_script]
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$DOCKER_IMAGE_NAME" .
    - |
      if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        docker push "$DOCKER_IMAGE_NAME"
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
        docker push "$CI_COMMIT_BRANCH"
  after_script:
    - docker logout $CI_REGISTRY
  variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE_PREFIX/pre-commit:$CI_COMMIT_REF_SLUG
    CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE_PREFIX/pre-commit
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
